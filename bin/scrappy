#!/usr/bin/ruby
# encoding: UTF-8

require 'rbconfig'
WINDOWS_PLATFORM = Config::CONFIG['host_os'] =~ /mswin|mingw/

if !WINDOWS_PLATFORM
  stty_save = `stty -g`.chomp
  trap('INT') { system('stty', stty_save); Scrappy::App.quit }
end

module Scrappy
  Root = File.expand_path(File.dirname(File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__) + "/..")

  require 'rubygems'
  require 'optparse'
  require "#{Root}/lib/scrappy"
  
  SESSION_TOKEN = rand(100000000)
  Options = OpenStruct.new
  Kb      = OpenStruct.new

  class App
    def self.run
      Options.port = 3434
      Agent::Options.workers = 10
      Agent::Options.depth = -1
      args = ARGV.map { |arg| arg.split(" ") }.flatten

      OptionParser.new do |opts|
        opts.on('-v', '--version')              { output_version; exit 0 }
        opts.on('-h', '--help')                 { output_help; exit 0 }
        opts.on('-g URI', '--get URI')          { |uri| Options.uri = uri; Options.http_method=:get }
        opts.on('-p URI', '--post URI')         { |uri| Options.uri = uri; Options.http_method=:post }
        opts.on('-D', '--dump')                 { Agent::Options.dump = true; Agent::Options.format = :rdf }
        opts.on('-u', '--debug')                { Agent::Options.debug = true }
        opts.on('-s', '--server [BASE_URI]')    { |uri| Options.server = true; Options.base_uri = uri }
        opts.on('-a', '--admin [BASE_URI]')     { |uri| Options.admin = true; Options.base_uri = uri }
        opts.on('-P P', '--port P')             { |p| Options.port = p }
        opts.on('-c C', '--concurrence C')      { |c| Agent::Options.workers = c.to_i }
        opts.on('-d D', '--delay D')            { |d| Agent::Options.delay = d; Agent::Options.workers = 1 }
        opts.on('-l L', '--levels L')           { |l| Agent::Options.depth = l.to_i }
        opts.on('-r', '--reference')            { Agent::Options.referenceable = true }
        opts.on('-f FORMAT', '--format FORMAT') { |f| Agent::Options.format = f.to_sym }
        opts.on('-t TIME', '--time TIME')       { |t| Agent::Options.time = t.to_i*60 } # converts minutes to seconds
        opts.on('-o URIs', '--observe URIs')    { |uris| Options.observe = uris.split(',') }
      end.parse!(args)
      @file = args.shift

      if Options.uri
        Options.quiet = true
        puts Agent.new.proxy(:http_method=>:get, :uri=>Options.uri).output
      elsif Options.observe
        Agent.new.observe(Options.observe)
      elsif Options.admin or Options.server
        if Options.admin
          puts "Launching Scrappy Web Admin (browse http://localhost:#{Options.port})..."
        else
          puts "Launching Scrappy Web Server..."
        end
        require 'scrappy/server/server'
        Thin::Logging.silent = true
        Scrappy::Server.run! :host => 'localhost', :port => Options.port, :environment => :production,
                             :base_uri=>Options.base_uri
      else
        output_version
        puts 'To get help use: scrappy -h'
        exit 0
      end
      Scrappy::App.quit
    end

    def self.quit
      puts "\"#{Quotes[rand(Quotes.length)]}\"" unless Options.quiet
      exit
    end
    
    def self.data_folder
      @data_folder
    end
    def self.cache_folder
      @cache_folder
    end
    def self.samples_file
      @samples_file
    end
    def self.samples
      @samples ||= []
    end
    
    def self.add_sample sample
      self.samples.unshift sample
      save_samples
      sample
    end
    def self.delete_sample id
      @samples.delete @samples[id]
      save_samples
    end
    def self.save_samples
      open(@samples_file, "w") { |f| Marshal.dump(@samples, f) }
    end
    def self.editable_kb?
      @editable_kb
    end
    def self.add_pattern graph
      new_patterns = Scrappy::Kb.patterns.merge graph
      save_patterns new_patterns
      onload
    end
    def self.save_patterns new_patterns
      fragments = case new_patterns
      when Array then
        new_patterns
      when RDF::Graph then
        ( new_patterns.find(nil, Node('rdf:type'), Node('sc:Fragment')) - new_patterns.find([], Node('sc:subfragment'), nil) ).
          map { |f| RDF::Graph.new(f.all_triples) }
      end

      content  = RDF::ID.ns.map{|k,v| "#{k}: #{v}\n"} * ''
      fragments.each { |f| content += f.serialize(:yarf, false) }
      open(@patterns_file, "w") { |f| f.write content }
    end
    def self.delete_patterns
      graph         = Scrappy::Kb.patterns
      graph.triples = []
      content       = graph.serialize(:yarf)
      open(@patterns_file, "w") { |f| f.write content }
      onload
    end
    def self.delete_pattern id
      graph          = Scrappy::Kb.patterns
      fragment       = graph[id]
      graph.triples -= fragment.all_triples
      content        = graph.serialize(:yarf)
      open(@patterns_file, "w") { |f| f.write content }
      onload
    end
    def self.add_extractor graph
      open(File.join(@extractors_folder,"extractor_#{Dir[File.join(@extractors_folder,'*')].size}.yarf"), "w") { |f| f.write graph.serialize(:yarf) }
      onload
    end
    def self.delete_extractor uri
      Dir[File.join(@extractors_folder, '*')].each do |file|
        format = file.split('.').last.to_sym
        next if format==:ignore
        graph = RDF::Parser.parse format, open(file).read
        uri_selectors  = (graph.find(nil, Node('rdf:type'), Node('sc:UriSelector')) +
                          graph.find(nil, Node('rdf:type'), Node('sc:UriPatternSelector'))).
                          flatten.select do |uri_selector|
                            uri_selector.rdf::value.include?(uri)
        end
        fragments = uri_selectors.map { |uri_selector| graph.find(nil, Node('sc:selector'), uri_selector) }.flatten
        fragments.each { |fragment| graph.triples -= fragment.all_triples }
        open(file, "w") { |f| f.write graph.serialize(format) } if fragments.any?
      end
      onload
    end

    protected
    def self.output_help
      output_version
      puts """Synopsis 
  Scrappy is a tool to scrape semantic data out of the unstructured web

Examples
  This command retrieves a web page
    scrappy -g http://www.example.com

Usage 
  scrappy [options]

  For help use: scrappy -h

Options
  -h, --help               Displays help message
  -v, --version            Display the version, then exit
  -f, --format             Picks output format (json, ejson, rdf, ntriples, png)
  -g, --get URL            Gets requested URL
  -p, --post URL           Posts requested URL
  -c, --concurrence VALUE  Sets number of concurrent connections for crawling (default is 10)
  -l, --levels VALUE       Sets recursion levels for resource crawling (default is infinite crawling)
  -d, --delay VALUE        Sets delay (in ms) between requests (default is 0)
  -D, --dump               Dumps RDF data to disk
  -u, --debug              Shows debugging traces
  -o, --observe URLs       Observes the specified URLs storing their data into the repository
  -s, --server [ROOT]      Runs web server (optionally specify server's root url)
  -a, --admin [ROOT]       Runs admin web server (optionally specify server's root url)
  -P, --port PORT          Selects port number (default is 3434)
  -t, --time TIME          Returns repository data from the last given minutes
  -r, --reference          Outputs reference information

Authors
  José Ignacio Fernández, Alberto Mardomingo, Jacobo Blasco

Copyright
  Copyright (c) 2010 José Ignacio Fernández. Licensed under the MIT License:
  http://www.opensource.org/licenses/mit-license.php"""
    end
   
    def self.output_version
      puts "Scrappy v#{Scrappy::VERSION}"
    end

    def self.define_paths
      # Check local or global knowledge base
      @home = WINDOWS_PLATFORM ? "#{ENV['HOME']}/scrappy" : "#{ENV['HOME']}/.scrappy"
      
      extractors_dirname = "extractors"
      cache_dirname      = "cache"
      cache_filename     = "scrappy-#{Scrappy::VERSION}.kb"
      config_filename    = "config.yml"
      samples_filename   = "samples"
      patterns_filename  = "patterns.yarf"
      
      if File.exists?(File.join(@home, extractors_dirname))
        @editable_kb       = true
        @extractors_folder = File.join @home, extractors_dirname
        @cache_folder      = File.join @home, cache_dirname
      else
        @editable_kb       = false
        @extractors_folder = File.join Scrappy::Root, extractors_dirname
        @cache_folder      = Dir.tmpdir
      end
      @cache_file    = File.join @cache_folder, cache_filename
      @config_file   = File.join @home, config_filename
      @samples_file  = File.join @home, samples_filename
      @patterns_file = File.join @home, patterns_filename
      Dir.mkdir @home            if Dir[@home].empty?
      Dir.mkdir cache_folder     if Dir[cache_folder].empty?
    end
    
    def self.load_files_from folder
      kb = RDF::Graph.new
      kb.triples = ( Dir[File.join(folder, "*")].inject([]) do |triples, file|
        extension = file.split('.').last.to_sym
        triples + if extension==:ignore or File.directory?(file)
          []
        else
          graph = RDF::Parser.parse(extension, open(file).read)
          kb.ns.merge! graph.ns
          graph.triples
        end
      end )
      kb
    end
    
    def self.onload
      define_paths
      
      # Load knowledge base
      Agent::Options.kb ||= RDF::Graph.new
      
      Kb.extractors, Kb.patterns, RDF::ID::count = if File.exists?(@cache_file) and File.mtime(@cache_file) >= Dir["#{@extractors_folder}/*",@extractors_folder,@patterns_file].map{ |f| File.mtime(f) }.max
        # Just load kb from cache
        open(@cache_file) { |f| Marshal.load(f) }
      else
        # Load YARF files and cache kb
        extractors = load_files_from(@extractors_folder)
        patterns   = File.exists?(@patterns_file) ? RDF::Parser.parse(:yarf, open(@patterns_file).read) : RDF::Graph.new
        open(@cache_file, "w") { |f| Marshal.dump([extractors, patterns, RDF::ID::count], f) }
        [extractors, patterns, RDF::ID::count]
      end

      # Sets new kb
      Agent::Options.kb.replace Kb.extractors
      Agent::Options.kb.ns = Kb.extractors.ns
      # Adds defined prefixes to namespace
      RDF::ID.ns.merge! Agent::Options.kb.ns

      # Looks for a configuration file. If it does not exist, Scrappy does not use Sesame
      # It looks for it in the home .scrappy dir
      if File.exist?(@config_file)
        config = YAML::load_file(@config_file)["repository"]
        # Convert the strings from the YAML file into symbols
        repository_options = {}
        config.each { |k,v| repository_options[k.to_sym] = v }
        Agent::Options.repository = Repository.new repository_options
      end

      if File.exist?(@samples_file)
        @samples = open(@samples_file) { |f| Marshal.load(f) }
      end
    end

    self.onload
  end

  Quotes = """Knowledge talks, wisdom listens
Fool me once, shame on you. Fool me twice, shame on me
Only the wisest and the stupidest of men never change
Don’t let your victories go to your head, or your failures go to your heart
Those who criticize our generation forget who raised it
Criticizing is easy, art is difficult
I don’t know what the key to success is, but the key to failure is trying to please everyone
When the character of a man is not clear to you, look at his friends
Not to care for philosophy is to be a true philosopher
The mind is like a parachute. It doesn’t work unless it’s open
The best mind-altering drug is truth
Be wiser than other people if you can, but do not tell them so
Never forget what a man says to you when he is angry
A winner listens, a loser just waits until it is their turn to talk
Guns don’t kill people — people do
He who knows others is wise. He who knows himself is enlightened
If you are not part of the cure, then you are part of the problem
The only time you run out of chances is when you stop taking them
The best things in life are not things
An investment in knowledge always pays the best interest
You can tell more about a person by what he says about others than you can by what others say about him
Think like a man of action, and act like a man of thought
He who knows others is learned; he who knows himself is wise
Going to church doesn’t make you a Christian, anymore than standing in your garage makes you a car
Never challenge an old man, because if you lose, you’ve lost to an old man, and if you win, so what?
Half our life is spent trying to find something to do with the time we have spent most of life trying to save
He who indulges in a task without proper knowledge will deteriorate rather than improve the case
It is because of it’s emptiness that the cup is useful
When the people of the world all know beauty as beauty, there arises the recognition of ugliness
The apprentice who tries to take the carpenters place, always cuts his hands
In the end, we will remember not the words of our enemies, but the silence of our friends
A wise man’s actions speak for himself
Never wrestle with a pig -- you both get dirty, but the pig likes it
50% of the solution is to put your hands on the problem
Never keep your head down, you’re better than many
Those who fail to prepare, are preparing to fail
The man who smiles when things go wrong has thought of someone to blame it on
Time is a great teacher, but unfortunately it kills all its pupils
It's true that we don't know what we've got until we lose it, but it's also true that we don't know what we've been missing until it arrives
Never take life seriously. Nobody gets out alive anyway
The only way to keep your health is to eat what you don't want, drink what you don't like, and do what you'd rather not
I am so clever that sometimes I don't understand a single word of what I am saying
Dogs have owners, cats have staff
I put all my genius into my life; I put only my talent into my works
It is better to be beautiful than to be good, but it is better to be good than to be ugly
All human beings, by nature, desire to know
All life is an experiment. The more experiments you make the better
An investment in knowledge always pays the best interest
An optimist is a person who sees a green light everywhere. The pessimist sees only the red light. But the truly wise person is color blind
Chance favors only those who court her
Give a man a fish, he'll eat for a day. Teach a man how to fish, he'll eat for a lifetime
God helps them that help themselves
Great beginnings are not as important as the way one finishes
Happiness is not a reward - it is consequence. Suffering is not a punishment - it is a result
Don't think much of a man who is not wiser today than he was yesterday
Maturity is achieved when a person postpones immediate pleasures for long-term values
Men are wise in proportion, not to their experience, but to their capacity for experience
Much wisdom often goes with fewer words
Never leave that till tomorrow which you can do today
Never mistake knowledge for wisdom. One helps you make a living; the other helps you make a life
Nothing is a waste of time if you use the experience wisely
It requires wisdom to understand wisdom: the music is nothing if the audience is deaf
It takes a great deal of living to get a little deal of learning
Live as if you were to die tomorrow. Learn as if you were to live forever
Unless you try to do something beyond what you have already mastered, you will never grow
What you have to do and the way you have to do it is incredibly simple. Whether you are willing to do it is another matter
When written in Chinese the word crisis is composed to two characters. One represents danger, and the other represents opportunity
Cheer up, the worst is yet to come
Common sense ain't common
A coward is a hero with a wife, kids, and a mortgage
All power corrupts, but we need electricity
Do not try to live forever. You will not succeed
Pick the flower when it is ready to be picked
The greatest risk is the risk of riskless living
The man who does things makes many mistakes, but he never makes the biggest mistake of all - doing nothing
The man who makes no mistakes does not usually make anything
The results you achieve will be in direct proportion to the effort you apply
The reward of a thing well done is to have done it
Don’t argue with idiots. They will bring you down to their level and beat you with experience
Choose a work you love, and you will never have to work a day in your life
The secret of creativity is knowing how to hide your sources
I never think of the future. It comes soon enough
If you want to go quick, go alone. If you want to go far, go together
The only thing that interferes with my learning is my education
Excesive literary production is a social offense
A man who dares to waste one hour of time has not discovered the value of life
Any idiot can face a crisis -- it's day to day living that wears you out
Every man dies. Not every man really lives
After two weeks of working on a project, you know whether it will work or not
All things are difficult before they are easy
Sport is hard work for which you do not get paid
Do not hire a man who does your work for money, but him who does it for love of it
Failure is success if we learn from it
Formal education will make you a living; self-education will make you a fortune
Lost time is never found again
Men talk of killing time, while time quietly kills them
Only entropy comes easy
Any man can make mistakes, but only an idiot persists in his error
Managing is getting paid for home runs someone else hits""".split("\n")
end

Scrappy::App.run
